package main

// Code generated by /home/lincoln/.asdf/installs/golang/1.13.4/packages/bin/peg -noast -switch -inline -strict -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleFst
	ruleAdd
	ruleAddSuffix
	ruleMul
	ruleMulSuffix
	ruleExp
	ruleNum
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
)

var rul3s = [...]string{
	"Unknown",
	"Fst",
	"Add",
	"AddSuffix",
	"Mul",
	"MulSuffix",
	"Exp",
	"Num",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type Calculator struct {
	Expression

	Buffer string
	buffer []rune
	rules  [12]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
}

func (p *Calculator) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Calculator) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Calculator
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func Pretty(pretty bool) func(*Calculator) error {
	return func(p *Calculator) error {
		p.Pretty = pretty
		return nil
	}
}

func (p *Calculator) Init(options ...func(*Calculator) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		text                 string
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		if matches {
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Fst <- <(Add !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleAdd]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(ruleFst, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Add <- <(Mul AddSuffix)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[ruleMul]() {
					goto l3
				}
				{
					position5 := position
					{
						position6, tokenIndex6 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l6
						}
						position++
						if !_rules[ruleAdd]() {
							goto l6
						}
						{
							fmt.Println("AddOp")
							p.AddOperator(TypeAdd)
						}
						goto l7
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
				l7:
					add(ruleAddSuffix, position5)
				}
				add(ruleAdd, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 AddSuffix <- <('+' Add Action0)?> */
		nil,
		/* 3 Mul <- <(Exp MulSuffix)> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				{
					position12 := position
					{
						position13, tokenIndex13 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l14
						}
						position++
						if !_rules[ruleAdd]() {
							goto l14
						}
						if buffer[position] != rune(')') {
							goto l14
						}
						position++
						goto l13
					l14:
						position, tokenIndex = position13, tokenIndex13
						{
							position15 := position
							{
								position16 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l10
								}
								position++
							l17:
								{
									position18, tokenIndex18 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l18
									}
									position++
									goto l17
								l18:
									position, tokenIndex = position18, tokenIndex18
								}
								begin := position16
								end := position
								text = string(buffer[begin:end])
							}
							{
								fmt.Printf("Num: %v\n", text)
								p.AddValue(text)
							}
							add(ruleNum, position15)
						}
					}
				l13:
					add(ruleExp, position12)
				}
				{
					position20 := position
					{
						position21, tokenIndex21 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l21
						}
						position++
						if !_rules[ruleMul]() {
							goto l21
						}
						{
							fmt.Println("MulOp")
							p.AddOperator(TypeMultiply)
						}
						goto l22
					l21:
						position, tokenIndex = position21, tokenIndex21
					}
				l22:
					add(ruleMulSuffix, position20)
				}
				add(ruleMul, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 4 MulSuffix <- <('*' Mul Action1)?> */
		nil,
		/* 5 Exp <- <(('(' Add ')') / Num)> */
		nil,
		/* 6 Num <- <(<[0-9]+> Action2)> */
		nil,
		/* 8 Action0 <- <{ fmt.Println("AddOp"); p.AddOperator(TypeAdd) }> */
		nil,
		/* 9 Action1 <- <{ fmt.Println("MulOp"); p.AddOperator(TypeMultiply) }> */
		nil,
		nil,
		/* 11 Action2 <- <{ fmt.Printf("Num: %v\n", text); p.AddValue(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
